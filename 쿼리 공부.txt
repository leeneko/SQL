데이터 정의 언어 : DDL : Data Definition Language
CREATE	: 데이터베이스 개체 : 테이블, 인덱스, 제약조건 등의 정의
DROP	: 데이터베이스 개체 삭제
ALTER	: 데이터베이스 개체 정의 변경

데이터 조작 언어 : DML : Data Manipulation Language
INSERT	: 행 데이터 또는 데이터 테이블의 삽입
UPDATE	: 표 업데이트
DELETE	: 테이블에서 특정 행 삭제
SELECT	: 테이블 데이터의 검색 결과 집합의 취득

데이터 제어 언어 : DCL : Data Control Language
GRANT	: 특정 데이터 베이스 사용자에게 특정 작업 수행 권한을 부여
REVOKE	: 특정 데이터베이스 이용자로부터 이미 준 권한을 박탈함
COMMIT	: 트랜잭션의 실행
ROLLBACK	: 트랜잭션 취소
SAVEPOINT	: 무작위로 롤백 지점을 설정
LOCK	: 표 등의 자원을 차지

커서 정의 및 사용
'커서'는 SELECT 문장 등에 의한 데이터베이스 검색에 의한 검색 실행 결과를 한 줄씩 검색하고,
처리하기 위해 데이터베이스 서버 측의 결과 집합과 행 획득 위치를 나타내는 개념을 말한다.
커서의 정의와 그 작업은 주로 응용 프로그램 등의 절차적 언어에서의 SQL 실행시 사용된다.
DECLARE CURSOR	: 커서 정의
OPEN	: 커서 열기
FETCH	: 커서 포인터가 가리키는 위치의 행 데이터를 검색하고 포인터를 일행 분 진행
UPDATE	: 커서 포인터가 가리키는 위치의 행 데이터 업데이트
DELETE	: 커서 포인터가 가리키는 위치의 행 데이터 삭제
CLOSE	: 커서 닫기

연산자
=	같음
<> or !=	같지 않음
>	보다 큼
<	보다 작음
>=	보다 크거나 같음
<=	보다 작거나 같음
BETWEEN	일정 범위 사이
LIKE	패턴 검색
IN	컬럼의 여러 가능한 값들을 지정

조건 표현
CASE/WHEN/THEN/ELSE/END

동적 SQL
SQL 문을 소스 코드로 고정하지 않고 데이터베이스에 액세스할 때마다 구문을 다시 할 경우 유용하며 
CREATE, DROP, ALTER(데이터 정의 언어, DDL)와 같이 데이터베이스 제품의 기능 업데이트에 의해 새로운 명령이 추가되는 것은 
전처리 해당 작업이 부담이 되기 때문에, 대부분 DDL 문은 동적 SQL에서 실행하는 것이 일반적이다.

※ SELECT문
SELECT
	*,
	SUM(CASE WHEN A"date" = '20190101' THEN B."Qty" ELSE 0 END ) AS "1일",
	CASE WHEN A.ITEMGROUP > 0 THEN
		A.ITEMNAME
	ELSE
		A.ITEMGROUP
	END AS ITEMGROUP
INTO TEMP
FROM "테이블이름1" A
INNER JOIN "테이블이름2" B ON A."컬럼명a" = B."컬럼명b"
WHERE A."컬럼명1" = '1'
AND A."컬럼명2" BETWEEN '20190101' AND '20190131'
GROUP BY A."컬럼명3"
ORDER BY B."컬럼명" DESC
UNION ALL

테이블에 저장된 데이터만 삭제할 때
TRUNCATE TABLE 테이블이름

※ INSERT문
INSERT INTO 테이블이름(필드이름1, 필드이름2, 필드이름3, ...)
VALUES (데이터값1, 데이터값2, 데이터값3, ...)

※ UPDATE문
UPDATE 테이블이름
SET 필드이름1=데이터값1, 필드이름2=데이터값2, ...
WHERE 필드이름=데이터값

※ DELETE문
DELETE FROM 테이블이름
WHERE 필드이름=데이터값

※ CASE문
CASE WHEN THEN (조회된 값에 대한 조건 걸기)
CASE
	WHEN 조건1 TEHN 조회할 값1
	WHEN 조건2 TEHN 조회할 값2
	ELSE 나머지
END AS 'Alias'

형변환
CAST(컬럼명 AS 자료형)

입력한 날의 달에 마지막 날짜
LAST_DAY(sysdate)

WHILE a <= b DO
	function
	a := :a + 1;
END WHILE

흐름 제어
1. CASE
2. IF()
3. IFNULL()
4. NULLIF()

※ IF문
IF boolean-expression THEN
	statements
END IF;

※ 트리거 (Trigger)
SQL 서버 로그인 시에 실행하는 LOGON TRIGGER, 특정 데이터베이스 안의 DDL 이벤트(CREATE TABLE 등)에 반응하는 DDL 트리거, 그리고 테이블이나 뷰의 SELECT, UPDATE, DELETE, INSERT 등에 반응하는 DML 트리거 등이 있다.


http://intomysql.blogspot.com/2011/01/distinct-group-by.html
DISTINCT는 주로 UNIQUE한 컬럼이나 튜플(레코드)을 조회하는 경우 사용되며,
GROUP BY는 데이터를 그룹핑해서 그 결과를 가져오는 경우 사용되는 쿼리 형태이다.
두 작업은 동일한 형태의 작업이며 내부적으로 동일한 코드를 사용한다.
DISTINCT의 결과는 정렬된 결과가 아니지만, GROUP BY는 정렬된 결과를 보여준다.
DISTINCT로만 가능한 기능
1. SELECT COUNT(DISTINCT fd1) FROM table1;
GROUP BY로만 가능한 기능
2. SELECT fd, MIN(fd2), MAX(fd2) FROM table2 GROUP BY fd;
요약하자면 단순한 중복 제거엔 DISTINCT가 적절하다.(단, DISTINCT(fd1)과 같이 함수로 사용할 수 없어 조회되는 결과 전부에 적용되어버린다)
+ 추가 : GROUP BY를 사용했을 때, 정렬이 필요없으면 ORDER BY NULL을 붙인다.

Having 절은 SELECT에서 사용하지 말자

이해안된 쿼리
1) https://image.slidesharecdn.com/sql-160925070730/95/sql-for-sqlsqltipsql-8-638.jpg?cb=1479362043
2) https://image.slidesharecdn.com/sql-160925070730/95/sql-for-sqlsqltipsql-13-638.jpg?cb=1479362043
3) https://image.slidesharecdn.com/sql-160925070730/95/sql-for-sqlsqltipsql-17-638.jpg?cb=1479362043
4) https://image.slidesharecdn.com/sql-160925070730/95/sql-for-sqlsqltipsql-19-638.jpg?cb=1479362043
5) https://image.slidesharecdn.com/sql-160925070730/95/sql-for-sqlsqltipsql-20-638.jpg?cb=1479362043

MS SQL TRY CATCH : http://blog.sooli.com/763
HANA SQL DECLARE EXIT HANDLER : https://help.sap.com/viewer/de2486ee947e43e684d39702027f8a94/2.0.00/en-US/ebc8b804be2e44789d767895f32503cf.html
